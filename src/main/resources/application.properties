spring.profiles.active=dev

Evento (Partida)
Id
Nome do Evento
Data e Hora
Jogo (Referência à entidade Jogo)
Detalhes do Evento (ex: Equipes, Mapas, etc.)
Status (Agendado, Em Andamento, Concluído)
Resultado


Jogo
Id
Nome (ex: League of Legends, Counter-Strike)
Descrição
Categoria (ex: MOBA, FPS)


Aposta
Id
Usuário (Referência à entidade Usuário)
Evento (Referência à entidade Evento)
Tipo de Aposta (Vitória, Primeiro sangue, etc.)
Valor Apostado
Odds no Momento da Aposta
Status (Aberta, Vencida, Perdida)
Resultado (Se venceu ou perdeu)
Data e Hora da Aposta


Transação
Id
Usuário (Referência à entidade Usuário)
Tipo (Depósito, Retirada, Ganho de Aposta)
Valor
Data e Hora


Equipe
Id
Nome
Jogo (Referência à entidade Jogo)
Lista de Jogadores


Jogador
Id
Nome
Apelido
Equipe (Referência à entidade Equipe)
Jogo (Referência à entidade Jogo)


Relacionamentos
Usuário <> Aposta: Um usuário pode ter várias apostas, mas uma aposta pertence a apenas um usuário.
Evento <> Aposta: Um evento pode ter várias apostas associadas a ele, mas uma aposta é feita em um único evento.
Jogo <> Evento: Um jogo pode ter vários eventos, mas um evento está associado a apenas um jogo.
Jogo <> Equipe: Um jogo pode ter várias equipes associadas a ele. Uma equipe pode participar de vários jogos (multigaming organizations).
Equipe <> Jogador: Uma equipe consiste em vários jogadores, mas um jogador pertence a apenas uma equipe no contexto de um determinado jogo.
Observações
Transações: Permite o rastreamento de todas as movimentações financeiras dos usuários na plataforma.
Eventos e Jogos: Esta modelagem permite adicionar facilmente novos jogos e eventos, tornando a aplicação escalável para abranger mais cenários dentro do universo de eSports.
Resultados de Eventos: Armazenar o resultado dentro do evento permite resolver apostas automaticamente com base no desfecho dos eventos.